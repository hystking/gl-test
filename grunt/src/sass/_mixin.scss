@mixin replaceImage($path, $scale: 1){
  @include backgroundImage($path, $scale);
  $width: _getImageWidth($path, $scale);
  $height: _getImageHeight($path, $scale);
  width: $width;
  height: $height;
  text-indent: -9999px;
}

@mixin backgroundImage($path, $scale: 1){
  $width: _getImageWidth($path, $scale);
  $height: _getImageHeight($path, $scale);
  background: image-url($path);
  @include background-size($width, $height);
}

@mixin loadSpriteAll(
    $dir, $reg, $sprName,
    $scale: 1,
    $spacing: 1px,
    $dummy: false,
    $nest: false, $inner: "&:before",
    $animation: false, $duration: 1s
    ){
  @if ($dummy == true){
    @include _loadSpriteAllDummy($dir, $sprName, $scale, $animation, $duration);
  } @else {
    $spr: sprite-map("#{$dir}/#{$reg}", $spacing: $spacing, $layout: horizontal);
    @if ($nest == true) {
      @include _loadSpriteAllNest($spr, $sprName, $scale, $animation, $duration, $inner);
    } @else {
      @include _loadSpriteAll($spr, $sprName, $scale, $animation, $duration);
    }
  }
}

@function _getImageWidth($image, $scale){
  @return ceil(image-width($image) * $scale);
}
@function _getImageHeight($image, $scale){
  @return ceil(image-height($image) * $scale);
}

@mixin _loadSprite($spr, $name, $scale){
  $sprPath: sprite-path($spr);
  $image: sprite-file($spr, $name);
  $width: _getImageWidth($image, $scale);
  $height: _getImageHeight($image, $scale);
  $pos: sprite-position($spr, $name);
  $left: floor(nth($pos, 1) * $scale);
  $top: floor(nth($pos, 2) * $scale);
  background-position: $left $top;
  width: $width;
  height: $height;
};

@mixin _loadSpriteTransform($spr, $name, $scale){
  $sprPath: sprite-path($spr);
  $image: sprite-file($spr, $name);
  $width: _getImageWidth($image, $scale);
  $height: _getImageHeight($image, $scale);
  $pos: sprite-position($spr, $name);
  $left: floor(nth($pos, 1) * $scale);
  $top: floor(nth($pos, 2) * $scale);
  @include translate($left, $top);
};

@mixin _loadSpriteAll($spr, $sprName, $scale, $animation, $duration){
  $sprImage: sprite-url($spr);
  $sprPath: sprite-path($spr);
  $sprWidth: _getImageWidth($sprPath, $scale);
  $sprHeight: _getImageHeight($sprPath, $scale);
  .#{$sprName}{
    background:image-url($sprPath) no-repeat;
    background-repeat: no-repeat;
    @include background-size($sprWidth, $sprHeight);
    display: block;
    text-indent: -9999px;
  }
  $names: sprite-names($spr);
  @each $name in $names{
    .#{$sprName}.#{$name}{
      @include _loadSprite($spr, $name, $scale);
    }
  }
  @if ($animation != false){
    $sprCount: length($names);
    $imageFirst: sprite-file($spr, nth($names, 1));
    $width: _getImageWidth($imageFirst, $scale);
    $height: _getImageHeight($imageFirst, $scale);
    $animName: #{$sprName}-anim;
    $leftLast: -$sprWidth * $sprCount / $sprCount;
    @include keyframes($animName){
      0%{ background-position: 0px 0px; }
      100%{ background-position: $leftLast 0px; }
    }
    .#{$sprName}.anim{
      width: $width;
      height: $height;
      @include animation($animName $duration steps($sprCount, end) 0s infinite);
    }
  }
}

@mixin _loadSpriteAllNest($spr, $sprName, $scale, $animation, $duration, $inner){
  $sprImage: sprite-url($spr);
  $sprPath: sprite-path($spr);
  $sprWidth: _getImageWidth($sprPath, $scale);
  $sprHeight: _getImageHeight($sprPath, $scale);
  .#{$sprName}{
    overflow: hidden;
    width: 0;
    height: 0;
    #{$inner}{
      @if ($inner == "&:before"){
        content: "";
      }
      background:image-url($sprPath) no-repeat;
      background-repeat: no-repeat;
      @include background-size($sprWidth, $sprHeight);
      display: block;
      text-indent: -9999px;
      width: $sprWidth;
      height: $sprHeight;
    }
  }
  $names: sprite-names($spr);
  @each $name in $names{
    .#{$sprName}.#{$name}{
      $image: sprite-file($spr, $name);
      width: _getImageWidth($image, $scale);
      height: _getImageHeight($image, $scale);
      #{$inner}{
        @include _loadSpriteTransform($spr, $name, $scale);
      }
    }
  }
  @if ($animation != false){
    $sprCount: length($names);
    $imageFirst: sprite-file($spr, nth($names, 1));
    $width: _getImageWidth($imageFirst, $scale);
    $height: _getImageHeight($imageFirst, $scale);
    $animName: #{$sprName}-anim;
    $leftLast: -$sprWidth * $sprCount / $sprCount;
    @include keyframes($animName){
      0%{ @include transform(translateX(0px)); }
      100%{ @include transform(translateX(#{$leftLast})); }
    }
    .#{$sprName}.anim{
      width: $width;
      height: $height;
      #{$inner}{
        @include animation($animName $duration steps($sprCount, end) 0s infinite);
      }
    }
  }
}

@mixin _loadSpriteAllDummy($sprPath, $sprName, $scale, $animation, $duration){
  .#{$sprName}{
    display: block;
    text-indent: -9999px;
  }
  $names: fileList("src/img/" + $sprPath + "/*.png", false, ".png");
  @each $name in $names{
    .#{$sprName}.#{$name}{
      @include replaceImage($sprPath + "/" + $name + ".png", $scale);
    }
  }
  @if ($animation != false){
    $sprCount: length($names);
    $imageFirst: $sprPath + "/" + nth($names, 1) + ".png";
    $width: _getImageWidth($imageFirst, $scale);
    $height: _getImageHeight($imageFirst, $scale);
    $animName: #{$sprName}-anim;
    @include keyframes($animName){
      $i: 0;
      @each $name in $names{
        #{$i / $sprCount * 100}#{"%"}{
          @include backgroundImage($sprPath + "/" + $name + ".png", $scale);
        }
        #{($i+1) / $sprCount * 100 - 0.0001}#{"%"}{
          @include backgroundImage($sprPath + "/" + $name + ".png", $scale);
        }
        $i: $i + 1;
      }
      100%{
        @include backgroundImage($sprPath + "/" + nth($names, $sprCount) + ".png", $scale);
      }
    }
    .#{$sprName}.anim{
      width: $width;
      height: $height;
      @include animation($animName $duration linear 0s infinite);
    }
  }
}

@mixin keyframes ($animation_name) {
  @-webkit-keyframes $animation_name {
    @content;
  }
  @-moz-keyframes $animation_name {
    @content;
  }
  @-o-keyframes $animation_name {
    @content;
  }
  @keyframes $animation_name {
    @content;
  }
}

@mixin animation ($property) {
  -webkit-animation: $property;
  -moz-animation: $property;
  -o-animation: $property;
  animation: $property;
}

@mixin position($x, $y, $unit: "px", $translate: false){
  $x_unit: "#{$x}#{$unit}";
  $y_unit: "#{$y}#{$unit}";
  @if(translate == false){
    left: $x_unit;
    top: $y_unit;
  } @else {
    @include transform(
      translateX($x_unit)
      translateY($y_unit)
    );
  }
}

@mixin trbl-centering($width: auto, $height: auto){
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  width: $width;
  height: $height;
}
